;************************************************************************
;*       Copyright 1999, Caldera Thin Clients, Inc.                     *
;*       This software is licenced under the GNU Public License.        *
;*       Please see LICENSE.TXT for further information.                *
;*                                                                      *
;*                  Historical Copyright                                *
;*                                                                      *
;*                                                                      *
;*									*
;*  Copyright (c) 1987, Digital Research, Inc. All Rights Reserved.	*
;*  The Software Code contained in this listing is proprietary to	*
;*  Digital Research, Inc., Monterey, California and is covered by U.S.	*
;*  and other copyright protection.  Unauthorized copying, adaptation,	*
;*  distribution, use or display is prohibited and may be subject to 	*
;*  civil and criminal penalties.  Disclosure to others is prohibited.	*
;*  For the terms and conditions of software code use refer to the 	*
;*  appropriate Digital Research License Agreement.			*
;*									*
;************************************************************************


public	MONO8XHT
if mono_port
extrn	next_seg_pgdown:near
endif

dseg
if mono_port or mono_mem 
		extrn	current_bank:byte
endif

MONO8XHT_MODE	dw	offset MONO8XHT_REPLACE
		dw	offset MONO8XHT_TRAN
		dw	offset MONO8XHT_XOR
		dw	offset MONO8XHT_ITRAN


	extrn	WRT_MODE:word
	extrn	TEXT_BP:word
	extrn	plane_loop_count:byte
if ( num_planes gt 1 ) and ( not segment_access )
	extrn	plane_port_tbl:word
	extrn	plane_read_tbl:word
endif
	extrn	DESTX:word,DESTY:word		;destination pixel address
	extrn	DELY:word			;size of area to use
	extrn	FOFF:word			;offset of source form
	extrn	FWIDTH:word			;form width of source form
	extrn	R_OFF:word,L_OFF:word		;skew factors
	extrn	WEIGHT:word			;thickening factor
	extrn	CLIP:word			;clipping flag
	extrn	XMN_CLIP:WORD,XMX_CLIP:WORD	;clipping region
	extrn	YMN_CLIP:WORD,YMX_CLIP:WORD	;
;
	extrn	WORD_MASK_TABLE:word		;masks for fringes
	extrn	INTIN:word
	extrn	CONTRL:word
cseg
	extrn	set_fnthdr:near
	extrn	chk_fnt:near
	extrn	CONCAT:near
	extrn	box_hic_init:near
	extrn	box_hic_exit:near
	extrn	box_plane_enable:near

MONO8XHT:
	cmp	CONTRL, 11			;is this justified text
	jz	MONO8XHT_QUIT
	mov	ax, DESTX
	and	al, 7
	jnz	MONO8XHT_QUIT			; if not on byte bound quit
	cmp	CLIP, 0
	jz	MONO8XHT_OK			; if cliping is on then see if ok
	mov	cx, DESTX
	cmp	cx, XMN_CLIP
	jl	MONO8XHT_QUIT
	mov	bx, DESTY
	cmp	bx, YMN_CLIP
	jl	MONO8XHT_QUIT
	add	bx, DELY
	dec	bx
	cmp	bx, YMX_CLIP
	jg	MONO8XHT_QUIT
	mov	ax, CONTRL+6			; get the char count
	shl	ax, 1
	shl	ax, 1
	shl	ax, 1				; mpy by 8
	add	ax, cx
	cmp	ax, XMX_CLIP
	jle	MONO8XHT_OK
MONO8XHT_QUIT:
	xor	ax,ax
	ret
MONO8XHT_OK:
	if	manual_update
	 mov	ax, DESTY
	 add	ax, DELY
	 push	ax			;Bottom edge
	 mov	ax, CONTRL+6		;Seems silly to do it all again, but
	 shl	ax, 1 			;if clipping is off it wasn't done
	 shl	ax, 1 			;the first time.
	 shl	ax, 1 
	 add	ax, DESTX	
	 push	ax			;AX = right fringe 
	 push	DESTY
	 push	DESTX
	 call	touch
	 add	sp, 8
	endif


;;;	mov ax, intin
;;;	call set_fnthdr
;;;	mov intin, ax			; jn 11-21-87
	call	chk_fnt
	mov	ax, graph_plane
	mov	es, ax		; init the segment register
	mov	bx, DESTX
	mov	ax, DESTY
	call	concat
	mov	bx, WRT_MODE
	shl	bx, 1
	mov	bx, MONO8XHT_MODE[BX]
	call	bx
	call	box_hic_exit
	mov	ax, 1
	ret
;
MONO8XHT_REPLACE:
	mov	bl, num_colors - 1
	call	box_plane_enable
	mov	bx, TEXT_BP
	and	bl, 0Fh		;BL = foreground (low 4 bits), background 0
	mov	bh, 4Fh		;Write mode 0
	call	box_hic_init
MONO8XHT_STRING_REP:
	mov	bx, offset INTIN		; get the character pointer
	mov	dx, FWIDTH			; get the font form width
	mov	cx, DELY
	mov	ax, CONTRL+6			; get the count
	push	bp
	mov	bp, next_line
MONO8XHT_STRING_REP_LOOP:
	push	ax
	mov	al,[bx]				; get the character
	xor	ah,ah
	mov	si, FOFF
	add	si,ax				; si = pointer to font
	push	di				; save the screen pointer
	push	cx				; save the scan line counter
	push	ds
	mov	ax, FOFF+2			; get font segment
	mov	ds, ax
MONO8XHT_CHAR_REP_LOOP:
	mov	al,[si]				; Write byte
	mov	es:[di],al			; (updating FG and BG)
	add	si, dx
	add	di, bp
	cmp	di, true_plane_size
	jc	mclr1
	add	di, true_to_first
mclr1:	loop	MONO8XHT_CHAR_REP_LOOP
	pop	ds
	pop	cx				; restore the scan line counter
	pop	di				; save the screen pointer
	inc	di				; point to the next byte in dest
	inc	bx
	inc	bx				; point to the next character
	pop	ax				; get the loop count back
	dec	ax
	jnz	MONO8XHT_STRING_REP_LOOP
	pop	bp
	ret


MONO8XHT_XOR:
	mov	bl, num_colors - 1
	call	box_plane_enable
	mov	bx, 3F0Fh	;XOR, mask
	call	box_hic_init
MONO8XHT_STRING_XOR:
	mov	bx, offset INTIN		; get the character pointer
	mov	dx, FWIDTH			; get the font form width
	mov	cx, DELY
	mov	ax, CONTRL+6			; get the count
	push	bp
	mov	bp, next_line
MONO8XHT_STRING_XOR_LOOP:
	push	ax
	mov	al,[bx]				; get the character
	xor	ah,ah
	mov	si, FOFF
	add	si,ax				; si = pointer to font
	push	di				; save the screen pointer
	push	cx				; save the scan line counter
	push	ds
	mov	ax, FOFF+2			; get font segment
	mov	ds, ax
MONO8XHT_CHAR_XOR_LOOP:
	mov	al,[si]
	xor	es:[di],al
	add	si, dx
	add	di, bp
	cmp	di, true_plane_size
	jc	mclx1
	add	di, true_to_first
mclx1:	loop	MONO8XHT_CHAR_XOR_LOOP
	pop	ds
	pop	cx				; restore the scan line counter
	pop	di				; save the screen pointer
	inc	di				; point to the next byte in dest
	inc	bx
	inc	bx				; point to the next character
	pop	ax				; get the loop count back
	dec	ax
	jnz	MONO8XHT_STRING_XOR_LOOP
	pop	bp
	ret

MONO8XHT_TRAN:
	mov	bl, num_colors - 1
	call	box_plane_enable
	mov	bx, TEXT_BP
	and	bl, 0Fh
	mov	al, bl
	shl	al, 1
	shl	al, 1
	shl	al, 1
	shl	al, 1
	or	bl, al
	mov	bh, 10h		;OR mode, mask polarity = 0
	call	box_hic_init
MONO8XHT_STRING_OR:
	mov	bx, offset INTIN		; get the character pointer
	mov	dx, FWIDTH			; get the font form width
	mov	cx, DELY
	mov	ax, CONTRL+6			; get the count
	push	bp
	mov	bp, next_line
MONO8XHT_STRING_OR_LOOP:
	push	ax
	mov	al,[bx]				; get the character
	xor	ah,ah
	mov	si, FOFF
	add	si,ax				; si = pointer to font
	push	di				; save the screen pointer
	push	cx				; save the scan line counter
	push	ds
	mov	ax, FOFF+2			; get font segment
	mov	ds, ax
MONO8XHT_CHAR_OR_LOOP:
	mov	al,[si]
	or	es:[di],al
	add	si, dx
	add	di, bp
	cmp	di, true_plane_size
	jc	mclo1
	add	di, true_to_first
mclo1:	loop	MONO8XHT_CHAR_OR_LOOP
	pop	ds
	pop	cx				; restore the scan line counter
	pop	di				; save the screen pointer
	inc	di				; point to the next byte in dest
	inc	bx
	inc	bx				; point to the next character
	pop	ax				; get the loop count back
	dec	ax
	jnz	MONO8XHT_STRING_OR_LOOP
	pop	bp
	ret

MONO8XHT_ITRAN:
	mov	bl, num_colors - 1
	call	box_plane_enable
	mov	bx, TEXT_BP
	and	bl, 0Fh
	mov	al, bl
	shl	al, 1
	shl	al, 1
	shl	al, 1
	shl	al, 1
	or	bl, al
	mov	bh, 60h		;AND mode, mask polarity = 1
	call	box_hic_init
MONO8XHT_STRING_AND:
	mov	bx, offset INTIN		; get the character pointer
	mov	dx, FWIDTH			; get the font form width
	mov	cx, DELY
	mov	ax, CONTRL+6			; get the count
	push	bp
	mov	bp, next_line
MONO8XHT_STRING_AND_LOOP:
	push	ax
	mov	al,[bx]				; get the character
	xor	ah,ah
	mov	si, FOFF
	add	si,ax				; si = pointer to font
	push	di				; save the screen pointer
	push	cx				; save the scan line counter
	push	ds
	mov	ax, FOFF+2			; get font segment
	mov	ds, ax
MONO8XHT_CHAR_AND_LOOP:
	mov	al,[si]
;;;	not	al
	and	es:[di],al
	add	si, dx
	add	di, bp
	cmp	di, true_plane_size
	jc	mcla1
	add	di, true_to_first
mcla1:	loop	MONO8XHT_CHAR_AND_LOOP
	pop	ds
	pop	cx				; restore the scan line counter
	pop	di				; save the screen pointer
	inc	di				; point to the next byte in dest
	inc	bx
	inc	bx				; point to the next character
	pop	ax				; get the loop count back
	dec	ax
	jnz	MONO8XHT_STRING_AND_LOOP
	pop	bp
	ret

