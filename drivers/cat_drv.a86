;**************************************************************************
;*			    DEVICE SPECIFIC ROUTINES			  *
;*									  *   
;*		These routines and equates are device dependant.	  *
;*									  *
;*									  *
;*									  *
;**************************************************************************
;Hist
;Name	Date	Modification
;
include externs.a86
include catregs.a86
dseg
	extrn   system8x8_hdr:word, system8x16_hdr:word
cseg
;
	public	INIT_G,DINIT_G
	public	CONCAT
	if not GSX
	 public	TRAN_FM
	 public	EX_TIMV
	endif
	public	S_COLMAP
	public	I_COLMAP
	public	CONTRL, INTIN, INTOUT, PTSIN, PTSOUT
	public	MAP_COL
	public	true_ysize
	public	true_plane_size
	public	true_to_first
	public	true_to_last
;
	extrn	entry:near		;the place to jump to if this module
;integer array indexing equates
	W_1	equ	word ptr 0
	W_2	equ	word ptr 2
	W_3	equ	word ptr 4
	W_4	equ	word ptr 6
	W_5	equ	word ptr 8
	W_6	equ	word ptr 10
	W_7	equ	word ptr 12
	W_8	equ	word ptr 14
	W_9	equ	word ptr 16
	W_10	equ	word ptr 18
;

ibmvdi	equ 0			;leave out the old code if for retail
pc1512	equ 	false		;PC1512 various special cases
;
;
;****************************************************************
;		IBM STANDARD ROM BIOS CALLS			*
;****************************************************************
direct		equ	false		; direct = true --> don't use ROS calls
					;   (for example, for two-screen stuff)
					; set to false for PCjr

SCREEN	equ	10H			;interrupts to use for rom routine I/O
KEYBD	equ	16H
rev_vid_on	equ	70h		;turn on reverse video bits
rev_vid_off	equ	07h		;turn off reverse video bits 
;
read_cur_pos	equ	3			;bios rom calls for char I/O
set_cur_pos	equ	2
read_char	equ	8
write_char	equ	9
set_palette	equ	0bh
get_character	equ	0			;keyboard read
;
EJECT
;
	jmp	entry		;if we come in from here, go to real entry
;
; Try a graphics mode and see if we got it
;
try_mode:
	mov	bl,al
	xor	ah,ah
	int	10h		;Select mode
	mov	ah,0Fh
	int	10h
	cmp	al,bl		;Is it what we asked for?
	ret
;
;****************************************	
;escape func 2
; Enter Graphics Mode 
;****************************************	
INIT_G:
	pushf
	mov	ax,cs
	mov	usermot+2,ax		;init the user call vectors segs
	mov	userbut+2,ax
	mov	usercur+2,ax
	mov	ax,offset umotvec
	mov	usermot,ax
	mov	ax,offset ubutvec
	mov	userbut,ax
	mov	ax,offset mov_cur
	mov	usercur,ax
	popf
escfn2: 
	cmp	dispmode,0
	jnz	escfn2_ok
	ret
escfn2_ok:
	mov	dispmode,0		; 

;	call	escfn8			; home alpha cursor.
;	call	escfn9			; clear alpha display.
if not direct
  	push	ds
 	mov	ax,0
  	mov	ds,ax
 	mov	bx,410h
 	mov	dl,[bx] 		;get current screen adapter
  	mov	al,dl
 	and	al,0cfh
  	or	al,10h
  	mov	[bx],al 		;select color card
  	pop	ds
  	mov	mode_save1,dl		;save it
	mov	ah,0Fh
	int	10h			;Get current mode
	mov	mode_save2,al
	jmps	setmode1
	db	'temp'
setmode1:
	mov	ah,80h			;Presumably this is patchable
	or	ah,ah			;to force a mode.
	js	probe_mode
	mov	al,ah
	jmps	got_mode

probe_mode:
	xor	bx, bx
	mov	ah, 8Fh			;Detect Sigma Color 400
	int	10h
	cmp	bx,0B800h		;Is it at 0B800h?
	jnz	not_sigma
	mov	al,42h			;Try its mode 42h
	call	try_mode
	jz	selected

not_sigma:
	mov	ax,0B800h		;See if there's more than 16k of
	mov	es,ax			;video RAM.
	mov	al,es:.4000h
	mov	es:byte ptr .4000h, 55h
	cmp	es:byte ptr .4000h, 55h
	jnz	vram_16k
	mov	ah,es:.0
	not	es:byte ptr .4000h
	cmp	es:byte ptr .4000h, 0AAh
	jnz	vram_16k		;Check if writes to 4000h appear at 0
	xor	ah,55h
	jnz	vram_32k
	cmp	es:byte ptr .0, 0AAh	;If it was 55h before the write and
	clc				;not AAh after, it's OK.
	jnz	vram_32k
vram_16k:
	stc
vram_32k:
	mov	es:.4000h,al		;Restore original byte
	jc	cga_mode
	mov	al,40h			;Olivetti M24 and compatibles
	call	try_mode
	jz	selected
	mov	al,74h			;Toshiba 3100
	call	try_mode
	jz	selected	
	mov	al,0D0h			;DEC VAXmate
	call	try_mode
	jz	selected
cga_mode:
	mov	al,6
got_mode:
	xor	ah,ah
	push	ax
	int	10h
	pop	ax
selected:
	cmp	al,6
	mov	ax,199
	mov	cx,2*(-ysize)
	mov	dx,4000h
	mov	bx,offset system8x8_hdr + 66
	jz	setupscr
	mov	ax,399
	shr	cx,1
	shl	dx,1
	mov	bx,offset system8x16_hdr + 66
setupscr:
	mov	true_yresmx, ax
	mov	word ptr DEV_TAB + 2, ax
	mov	true_ysize, cx
	mov	word ptr DEV_TAB + 8, cx
	mov	true_plane_size, dx
	sub	dx, 50h
	mov	true_to_last, dx
	neg	dx
	mov	true_to_first, dx
	or	byte ptr [bx], 1	;Default system font
	mov	ax, word ptr system8x16_hdr + 84
	mov	18[bx],ax
	mov	ax, word ptr system8x16_hdr + 86
	mov	20[bx],ax
	
endif
	call	clearmem		; clear graphics display
if direct
	mov	si,offset crt_init_table_g
	call	crt_init
endif
if mouse
	mov	bl,1
	call	mouse_function		;initialize the mouse
if not viewmax	;Not called for some reason
	mov	bl,2
	call	mouse_function
	mov	bl,1
	call	mouse_function
endif
endif
	ret
;
;****************************************	
;escape func 3
; Exit Graphics Mode
;****************************************	
DINIT_G:
escfn3: 
	cmp	dispmode,0
	jz	escfn3_ok
	ret
escfn3_ok:				; 
if mouse
	mov	bl,2
	call	mouse_function
endif
	mov	dispmode,1
	mov	ax,graph_plane		; ld in graphics memory address
	mov	es,ax
	mov	cx,true_plane_size	;number of bytes to zero
	shr	cx,1
	xor	ax,ax
	mov	di,0
	rep	stosw			; store plane_size zeros in graphmem
if direct
	mov	si,offset crt_init_table_a
	call	crt_init
else
	mov	dl,mode_save1		;get screen adapter
	push	ds
	xor	ax,ax
	mov	ds,ax
if not viewmax				;BUG? ViewMAX/2 doesn't set BX to
	mov	bx,410h			;anything. Not good.
endif
	mov	[bx],dl 		;select default card
	pop	ds
	mov	ah,0
	mov	al,mode_save2		;alpha mode
	int	screen
endif
	mov	attribute,rev_vid_off
if ibmvdi
	call	escfn8			;home
	call	escfn9			;clear to end of screen
else
	mov	ah,2				;set cursor position 0,0
	xor	dx, dx
	mov	bh, dh
	int	10h
	mov	ah, 9
	xor	bh, bh
	mov	cx, 2000
	mov	al, 20h
	mov	bl, 7
	int	10h
endif
	ret
EJECT
;****************************************************************
;I_COLMAP							*	
;	ENTRY	                                        	*
;		INTIN[0] = color index				*
;		INTIN[1] = req or actual flag			*
;								*
;	EXIT	                             			*
;		INTOUT[0] = color index				*
;		INTOUT[1] = RED					*
;		INTOUT[2] = GRN					*
;		INTOUT[3] = BLU					*
;								*
;	Reg. Used. AX, BX, CX, DX, DI				*
;								*
;****************************************************************
I_COLMAP:
	mov	bx, INTIN		;check if the index is in range of dev
	cmp	bx, 0
	jge	i_colmap_chkix
	jmps	i_colmap_badix
i_colmap_chkix:
	cmp	bx, num_colors-1	;test if index is too high
	jle	i_colmap_ixok
	jmps	i_colmap_badix
i_colmap_ixok:
	shl	bx, 1
	mov	bx, MAP_COL[bx]
	mov	di, bx			; di = ptr to act/req col tbls
	shl	di, 1
	shl	di, 1
	add	di, bx
	add	di, bx			; mpy ix by 6 to point into table
	mov	si, offset INTOUT+2
	mov	cx, 3
	mov	INTOUT, bx		; return the color index
	mov	bx, offset req_col_tbl
	test	INTIN+2, 0ffffh		; if != 0 then return actual values
	jz	i_colmap_load
	mov	bx, offset act_col_tbl
i_colmap_load:
	mov	ax, [bx+di]
	mov	[si], ax
	add	di, 2
	add	si, 2
	loop	i_colmap_load
	ret
i_colmap_badix:
	mov	INTOUT, -1
	ret	
EJECT
;****************************************************************
;S_COLMAP							*	
;	ENTRY	                                        	*
;		INTIN[0] = color index				*
;		INTIN[1] = RED 0 - 1000				*
;		INTIN[1] = GRN 0 - 1000				*
;		INTIN[1] = BLU 0 - 1000				*
;								*
;	EXIT	                             			*
;		                           			*
;								*
;	Reg. Used. AX, BX, CX, DX, DI				*
;								*
;****************************************************************
S_COLMAP:
	mov	bx, INTIN		;check if the index is in range of dev
	cmp	bx, 0
	jge	s_colmap_chkix
	jmp	s_colmap_exit
s_colmap_chkix:
	cmp	bx, num_colors-1	;test if index is too high
	jle	s_colmap_ixok
	jmp	s_colmap_exit
s_colmap_ixok:
	shl	bx, 1
	mov	bx, MAP_COL[bx]
	mov	di, bx			; di = ptr to act/req col tbls
	shl	di, 1
	shl	di, 1
	add	di, bx
	add	di, bx			; mpy ix by 6 to point into table
	mov	dx, INTIN+2		; get the red value
	call	s_colmap_val
	mov	dx, INTIN+4		; get the grn value
	call	s_colmap_val
	mov	dx, INTIN+6		; get the blu values 
	call	s_colmap_val
s_colmap_exit:
	ret
; 
s_colmap_val:
	mov	req_col_tbl[di], dx	; save the requested value
	add	di, 2			; move to the next value 
	ret

	if not GSX
;****************************************************************
;TRAN_FM							*	
;	ENTRY	                                        	*
;		                                     		*
;								*
;	EXIT	                             			*
;		                           			*
;								*
;	Reg. Used. AX, BX, CX, DX, DI				*
;								*
;****************************************************************
TRAN_FM:
	push	bp	
	push	es
	push	ds
	les	di,contrl_ptr
	mov	ax, es: word ptr 14[di]
	mov	bx, es: word ptr 16[di]		; get smfdb pointer
	mov	dx, es: word ptr 18[di]
	mov	bp, es: word ptr 20[di]		; get dmfdb pointer
	mov	es, bx
	mov	di, ax				; set es:di to it
	mov	ax, es: word ptr 12[di]		; get num of planes in source
; xform n to n planes
	push	ax				; save the plane count
	call	calc_src_form
	call	calc_des_form
	call	calc_seg_off
	pop	bx				; get the plane count back
col_to_col_lp:
	push	si
	push	di
	push	bx
	push	cx
col_to_col_loop:
	lodsw
if not byte_swap
	xchg	ah,al
endif
if rev_vid
	not	ax
endif
	stosw
	loop	col_to_col_loop
	pop	cx
	pop	bx
	pop	di
	pop	si
	call	tran_next_seg
	dec	bx
	jnz	col_to_col_lp
	pop	ds
	pop	es
	pop	bp
	ret
tran_next_seg:
	push	cx
	mov	ax, cx
	mov	cl, 3
	shr	ax, cl			;get the segment increment
	mov	bp, es
	add	bp, ax
	mov	es, bp
	mov	bp, ds
	add	bp, ax
	mov	ds, bp
	pop	cx
	mov	ax, cx			;get the byte increment
	and	ax, 0007h
	shl	ax, 1
	add	si, ax
	add	di, ax
	ret
;
calc_seg_off:
	mov	bp, cx				; find the next seg
	shr	bp,1
	shr	bp,1
	shr	bp,1
	mov	dx, cx
	shl	dx, 1
	and	dx, 000fh			; find the incremental offset
;	mov	bx,num_planes
	ret
;
calc_des_form:
	mov	ds, bp
	mov	si, dx				; load dmfdb pointer
	not	bx
	and	bx,1				; invert format
	mov	10[si],bx			; toggle dest form
	mov	ax, es: word ptr 2[di]		; get source ptr seg
	mov	di, es: word ptr [di]		; offset
	mov	es, ax
	mov	ax, 2[si]
	mov	si, [si]			; get dest ptr seg,offset
	mov	ds, ax
	xchg	si,di				; swap pointers
	mov	ax, es
	mov	dx, ds
	mov	es, dx
	mov	ds, ax
	ret
;
calc_src_form:
	mov	bx, es: word ptr 10[di]		; get the format flag
	mov	ax, es: word ptr 8[di]		; get the width in words
	mov	cx, es: word ptr 6[di]		; get the height in pixels
	push	dx
	mul	cx
	pop	dx
	mov	cx, ax				; cx = word count
	and	bx,bx				; if bx = 0 then dev spec form
	ret

EJECT
;****************************************************************
;EX_TIMV							*	
;	ENTRY	                                        	*
;		CONTRL 7,8 = NEW VEC                            *
;	EXIT	                             			*
;		                           			*
;		CONTRL 9,10 = OLD VEC				*
;               INTOUT [0] = TIMER TICK COUNT IN MILLISECS	*
;								*
;****************************************************************
EX_TIMV:
	pushf
	cli
	push	es
	push	ds
	les	di,contrl_ptr
	xor	ax,ax
	mov	ds,ax
	mov	si,4 * 1ch		;setup the offset to timer int vector
	mov	ax,[si]
	mov	es:word ptr 18[di],ax	;save old timer vector
	mov	ax,2[si]
	mov	es:word ptr 20[di],ax
	mov	ax, es:word ptr 14[di]
	mov	[si],ax
	mov	ax, es:word ptr 16[di]
	mov	2[si],ax
	pop	ds
	pop	es
	popf
	mov	ax,1
	mov	CONTRL+8,ax		; flag that data is to be returned 
	mov	ax, 55	
	mov	INTOUT, ax		; return the millisec/tick count 
	ret

	endif

if direct
;
;*****************************************************************
;crt_init
;	initializes the display controller with data from table
;*****************************************************************
crt_init:
	mov	dx,03d4h		;select port
	mov	bl,0			;select register
	mov	cl,length crt_init_table_a
crt_init_loop:
	mov	al,bl
	out	dx,al
	inc	bx
	inc	dx
	lodsb
	out	dx,al
	dec	dx
	loop	crt_init_loop
	inc	dx
	inc	dx
	inc	dx
	inc	dx
	lodsb
	out	dx,al
	inc	dx
	lodsb
	out	dx,al
	ret
endif
EJECT
;****************************************************************
;CONCAT 							*	
;	ENTRY	Reg. BX - X-coordinate (dev. coord.)		*
;		Reg. AX - Y-coordinate (dev. coord.)		*
;								*
;	EXIT	Reg. DI - Physical address			*
;		Reg. BL - Byte index				*	
;								*
;	Reg. Used. AX, BX, CX, DX, DI				*
;								*
;****************************************************************
concat:
	push	ds
	mov	dx, seg true_yresmx
	mov	ds, dx
	and	bx, 03ffh		;mask off 10 lsb for x-coord.
	mov	dh,al
	shr	ax,1
	cmp	true_yresmx, 199
	jz	concat0
	shr	ax,1
concat0:
	mov	dl, bl			;save low order byte of x-coord
	and	dl, 07h 		;mask off data bit index.
	mov	cl, 3			;set count to 3
	shr	bx, cl			;shift out 3 lsb of x-coord.
	mov	cl,bytes_line
	mul	cl			;brute force calculation
					;use shift and add if possible
	add	ax, bx			;concatenate y and x coordinates in AX
	and	dh,3
	jz	concat3
	cmp	true_yresmx, 199
	jnz	concat1
	and	dh,1
	jz	concat3
concat1:
	mov	cl,dh
	xor	ch,ch
concat2:
	add	ax, next_line
	loop	concat2
concat3:
	mov	di, ax			;di = memory address
	xor	dh, dh
	mov	bx, dx			;bx = bit index into data byte
	pop	ds
	ret
EJECT
include	ibmmdvsp.a86
if mouse
cseg
include imouse.a86
endif
cseg
include monmmre1.a86
include monmmre2.a86
dseg
include catdev.a86

if direct
;
crt_init_table_g   db	38h,28h,2dh,0ah,7fh,6h,64h,70h,2,1,0,0bh,0,0,0,0
		   db	1eh,3fh
;
crt_init_table_a   db	71h,50h,5ah,0ah,1fh,6h,19h,1ch,2,7,6,7,0,0,0,0
		   db	29h,30h
endif
dispmode	dw	1
mode_save1	db	0
mode_save2	db	3
true_yresmx	dw	399
true_ysize	dw	508
true_plane_size	dw	0
true_to_first	dw	0
true_to_last	dw	0

if not rev_vid
act_col_tbl	dw	   0,    0,    0	;black
		dw	1000, 1000, 1000	;white
req_col_tbl	dw	   0,    0,    0	;black
		dw	1000, 1000, 1000	;white
else
act_col_tbl	dw	1000, 1000, 1000	;white
		dw	   0,    0,    0	;black
req_col_tbl	dw	1000, 1000, 1000	;white
		dw	   0,    0,    0
endif
MAP_COL		dw	0
		dw	1		;red
		dw	1		;green
		dw	1		;blue
		dw	1		;cyan
		dw	1		;yellow	
		dw	1		;magenta
		dw	1		;white
		dw	1
		dw	1
		dw	1
		dw	1
		dw	1
		dw	1
		dw	1
		dw	1

CONTRL          rw      CONTRL_SIZE
INTIN           rw      INTIN_SIZE
PTSOUT          rw      PTSOUT_SIZE
		include date.a86
		db ' IBM CGA / AT&T 6300 driver '
		include copyrt.a86
		rs offset PTSIN + 2 * PTSIN_SIZE + 5 - offset $

INTOUT		rw INTOUT_SIZE


