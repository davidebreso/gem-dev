;**************************************************************************
;*			    DEVICE SPECIFIC ROUTINES			  *
;*									  *   
;*		These routines and equates are device dependant.	  *
;*									  *
;*									  *
;*									  *
;**************************************************************************
;Hist
;Name	Date	Modification
;
include externs.a86
dseg
	extrn	ptsin_ptr:dword,intin_ptr:dword
	extrn	system8x14_hdr:word, system8x16_hdr:word
cseg
;
	public	INIT_G,DINIT_G
	public	CONCAT
	if not GSX
	public	TRAN_FM
	public	EX_TIMV
	endif
	public	S_COLMAP
	public	I_COLMAP
	public	plygn_bez
	public	plygn_rrot
	public	escfn2
	public	first_motn
	public	kbd_mouse_sts
	public	contrl_status
	public	map_col
	public	CONTRL, INTIN, PTSIN, INTOUT, PTSOUT
	public	true_ysize
	public	true_planes
	public	true_maxcol
;
	extrn	entry:near		;the place to jump to if this module
	extrn	txtblt_rrot_table_1:word
	extrn	mouse_port:byte, mouse_type:byte

;integer array indexing equates
	W_1	equ	word ptr 0
	W_2	equ	word ptr 2
	W_3	equ	word ptr 4
	W_4	equ	word ptr 6
	W_5	equ	word ptr 8
	W_6	equ	word ptr 10
	W_7	equ	word ptr 12
	W_8	equ	word ptr 14
	W_9	equ	word ptr 16
	W_10	equ	word ptr 18
;
include uniregs.a86
if GSX
ibmvdi	equ	1
else
ibmvdi	equ 0			;leave out the old code if for retail
endif
pc1512	equ 	false		;PC1512 various special cases
;
;
;****************************************************************
;		IBM STANDARD ROM BIOS CALLS			*
;****************************************************************
direct		equ	false		; direct = true --> don't use ROS calls
					;   (for example, for two-screen stuff)
					; set to false for PCjr

SCREEN	equ	10H			;interrupts to use for rom routine I/O
KEYBD	equ	16H
rev_vid_on	equ	70h		;turn on reverse video bits
rev_vid_off	equ	07h		;turn off reverse video bits 
;
read_cur_pos	equ	3			;bios rom calls for char I/O
set_cur_pos	equ	2
read_char	equ	8
write_char	equ	9
set_palette	equ	0bh
get_character	equ	0			;keyboard read
;
EJECT
;
	jmp	entry		;if we come in from here, go to real entry
;****************************************	
;escape func 2
; Enter Graphics Mode 
;****************************************	
INIT_G:
	pushf
	mov	ax,cs
	mov	usermot+2,ax		;init the user call vectors segs
	mov	userbut+2,ax
	mov	usercur+2,ax
	mov	ax,offset umotvec
	mov	usermot,ax
	mov	ax,offset ubutvec
	mov	userbut,ax
	mov	ax,offset mov_cur
	mov	usercur,ax
	popf
escfn2: 
	cmp	dispmode,0
	jnz	escfn2_ok
	ret
escfn2_ok:
	mov	dispmode,0		; 

  	push	ds
 	xor	ax,ax
  	mov	ds,ax
	mov	al,ds:byte ptr .410h
	pop	ds
	mov	mode_save1,al
	mov	ah, 0Fh
	int	10h
	mov	mode_save2,al
;
; Now start probing for EGA/VGA modes.
;
	mov	ax,1A00h
	int	10h
	cmp	al,1Ah
	jnz	no_vga	;No VGA or MCGA present
	mov	al,0Fh	;EGA mono
	xor	dl,dl	;DL = 0: EGA mono
	cmp	bl,5	;EGA mono
	jz	j_gotmode
	inc	ax	;EGA colour
	inc	dx	;DL = 1: EGA colour
	cmp	bl,4	;EGA colour
	jz	j_gotmode
	mov	al,12h	;VGA colour
	mov	dl,2	;DL = 2: VGA mono
	cmp	bl,7	;VGA mono
	jz	j_gotmode
	inc	dx	;DL = 3: VGA colour
	jmps	j_gotmode
;
; If there's no combination code, assume an EGA.
;
no_vga:	mov	ah,12h
	mov	bl,10h
	int	10h	;Get EGA RAM size
	mov	al,0Fh
	xor	dl,dl	;0: EGA mono
	and	cl,0Fh	;Switch settings
	cmp	cl,9
	jnz	j_gotmode
	inc	ax
	inc	dx	;1: EGA colour
j_gotmode:
	jmps	gotmode
	db	'temp'
gotmode:
;
; I think this is for video patching - if bit 7 of DH is set, nothing 
; happens, but otherwise it sets the mode depending on the value of DH.
;
	mov	dh,80h
	or	dh,dh		
	js	gotmode1

	mov	dl,dh
	mov	al,0fh
	cmp	dl,0		; EGA mono
	jz	gotmode1
	inc	ax
	cmp	dl,1		; EGA colour
	jz	gotmode1
	mov	al,12h
gotmode1:
	mov	mode_colopt,dl
	test	dl,1		; ViewMAX/2 does this for EGA & VGA colour
;;;	or	dl,dl
	jz	gotmode2	; Anything other than EGA mono
	push	ds		; => playing with the equipment word
	xor	bx,bx
	mov	ds,bx
	and	ds:byte ptr .410h, 0CFh
	or	ds:byte ptr .410h, 20h
	pop	ds
gotmode2:
	mov	al, dl		; New in ViewMAX/2: Set mode based on DL
	add	al,0Fh		; not earlier guesses
	xor	ah,ah		; Set mode
	int	10h
	mov	ax, 349
	mov	cx, 508
	mov	bx, offset system8x14_hdr + 66
	test	mode_colopt, 2		;VGA or MCGA?
	jz	gotmode3
	mov	ax, 479			;Screen size
	mov	cx, 419			;and pixel ratio
	mov	bx, offset system8x16_hdr + 66
gotmode3:
	mov	true_yresmx, ax
	mov	word ptr DEV_TAB + 2, ax
	mov	true_ysize, cx
	mov	word ptr DEV_TAB + 8, cx
	or	byte ptr [bx], 1
	mov	ax, word ptr system8x16_hdr + 84
	mov	18[bx],ax
	mov	ax, word ptr system8x16_hdr + 86
	mov	20[bx],ax
	mov	ax, 1		;1 plane
	mov	bx, 2		;and 2 colours
	xor	cx,cx
	mov	dx,2
;;;	cmp	mode_colopt, 0
	test	mode_colopt, 1	;ViewMAX/II treats VGA mono as mono
	jz	gotmode5
	mov	al, 4		;4 planes
	mov	bl, 10h		;and 16 colours
	inc	cx
	mov	dl, 40h
	test	mode_colopt, 2	;Bit 2 set if VGA DAC present
	jz	gotmode5
	mov	dx,0FFFFh
gotmode5:
	mov	true_planes, ax
	mov	word ptr INQ_TAB + 8, ax
	mov	true_maxcol, bx
	mov	word ptr DEV_TAB + 26, bx
	mov	word ptr DEV_TAB + 70, cx
	mov	word ptr DEV_TAB + 78, dx
	test	mode_colopt, 1		;Colour?
	jnz	gotmode7
;;;;	xor	ax,ax
;
; If mono display, set 8 (dark grey) to 0 (black)
; ViewMAX/II doesn't do this because its vga mono mode is B/W not greyscale.
;
;;;;	mov	word ptr act_col_tbl + 42, ax
;;;;	mov	word ptr act_col_tbl + 44, ax
;;;;	mov	word ptr act_col_tbl + 46, ax
;;;;	mov	word ptr req_col_tbl + 42, ax
;;;;	mov	word ptr req_col_tbl + 44, ax
;;;;	mov	word ptr req_col_tbl + 46, ax
;;;;	cmp	mode_colopt, 0
;;;;	jnz	gotmode7
	mov	bx, offset MAP_COL + 2		; If mono, map all colours
	mov	cx, 0Fh				; to black.
gotmode6:
	mov	word ptr [bx],1	
	inc	bx
	inc	bx
	loop	gotmode6
gotmode7:
	call	init_lut
	mov	dx, 3c4h
	mov	al, 02
	out	dx, al			; init the plane mask add reg
	mov	dx, 3ceh
	mov	al, 04
	out	dx, al
	call	clearmem		; clear graphics display
if mouse
	mov	bl,1
	call	mouse_function		;initialize the mouse
	mov	bl,2
	call	mouse_function
	mov	bl,1
	call	mouse_function
endif
	ret
init_lut:
	mov	dx,offset mono_ega_tbl
	cmp	mode_colopt, 0
	jz	init_lut0
	mov	dx,offset mono_vga_tbl	;ViewMAX/II has a separate mono VGA
	cmp	mode_colopt,2		;palette.
	jz	init_lut0
	mov	dx,offset col_col_tbl
init_lut0:
	mov	ah,10h
	mov	al, 2
	push	ds
	push	ds
	pop	es
	int	10h
	pop	ds
	cmp	mode_colopt,3
	jnz	uni_lut_end	
;
; Load the VGA palette registers
;
	mov	cx,10h
	mov	si,offset col_col_tbl
	mov	di,offset uni_col_tbl
uni_lut:
	push	cx
	dec	cx
	push	cx
	mov	bx,cx
	shl	bx,1
	add	bx,cx
	mov	dh,[bx+di]
	mov	ch,1[bx+di]
	mov	cl,2[bx+di]
	pop	bx
	mov	bl,[bx+si]
	mov	ah,10h
	mov	al,10h
	int	10h
	pop	cx
	loop	uni_lut
uni_lut_end:
	ret
;
;****************************************	
;escape func 3
; Exit Graphics Mode
;****************************************	
DINIT_G:
escfn3: 
	cmp	dispmode,0
	jz	escfn3_ok
	ret
escfn3_ok:				; 
if mouse
	mov	bl,2
	call	mouse_function
endif
	mov	dispmode,1
	mov	dl,mode_save1		;get screen adapter
	push	ds
	mov	ax,0
	mov	ds,ax
	mov	bx,410h
	mov	[bx],dl 		;select default card
	pop	ds
	mov	al, mode_save2
	xor	ah,ah
	int	screen
	mov	attribute,rev_vid_off
if ibmvdi
	call	escfn8			;home
	call	escfn9			;clear to end of screen
else
	mov	ah,2				;set cursor position 0,0
	xor	dx, dx
	mov	bh, dh
	int	10h
	mov	ah, 9
	xor	bh, bh
	mov	cx, 2000
	mov	al, 20h
	mov	bl, 7
	int	10h
endif
	ret
EJECT
;****************************************************************
;I_COLMAP							*	
;	ENTRY	                                        	*
;		INTIN[0] = color index				*
;		INTIN[1] = req or actual flag			*
;								*
;	EXIT	                             			*
;		INTOUT[0] = color index				*
;		INTOUT[1] = RED					*
;		INTOUT[2] = GRN					*
;		INTOUT[3] = BLU					*
;								*
;	Reg. Used. AX, BX, CX, DX, DI				*
;								*
;****************************************************************
I_COLMAP:
	mov	bx, INTIN		;check if the index is in range of dev
	cmp	bx, 0
	jge	i_colmap_chkix
	jmps	i_colmap_badix
i_colmap_chkix:
	cmp	bx, true_maxcol	;test if index is too high
	jc	i_colmap_ixok
	jmps	i_colmap_badix
i_colmap_ixok:
	shl	bx, 1
	mov	bx, MAP_COL[bx]
	mov	di, bx			; di = ptr to act/req col tbls
	shl	di, 1
	shl	di, 1
	add	di, bx
	add	di, bx			; mpy ix by 6 to point into table
	mov	si, offset INTOUT+2
	mov	cx, 3
	mov	INTOUT, bx		; return the color index
	mov	bx, offset req_col_tbl
	test	INTIN+2, 0ffffh		; if != 0 then return actual values
	jz	i_colmap_load
	mov	bx, offset act_col_tbl
i_colmap_load:
	test	mode_colopt, 1		; New in ViewMAX/2: Separate colour
	jz	i_colmap_ld1		; and mono tables?
	add	bx, 60h
i_colmap_ld1:
	mov	ax, [bx+di]
	mov	[si], ax
	add	di, 2
	add	si, 2
	loop	i_colmap_ld1
	ret
i_colmap_badix:
	mov	INTOUT, -1
	ret	
EJECT
;****************************************************************
;S_COLMAP							*	
;	ENTRY	                                        	*
;		INTIN[0] = color index				*
;		INTIN[1] = RED 0 - 1000				*
;		INTIN[1] = GRN 0 - 1000				*
;		INTIN[1] = BLU 0 - 1000				*
;								*
;	EXIT	                             			*
;		                           			*
;								*
;	Reg. Used. AX, BX, CX, DX, DI				*
;								*
;****************************************************************
S_COLMAP:
	mov	bx, INTIN		;check if the index is in range of dev
	cmp	bx, 0
	jge	s_colmap_chkix
	jmp	s_colmap_exit
s_colmap_chkix:
	cmp	bx, true_maxcol		;test if index is too high
	jc	s_colmap_ixok
	jmp	s_colmap_exit
s_colmap_ixok:
	shl	bx, 1
	mov	bx, MAP_COL[bx]
	push	bx
	mov	di, bx			; di = ptr to act/req col tbls
	shl	di, 1
	shl	di, 1
	add	di, bx
	add	di, bx			; mpy ix by 6 to point into table
;
; ViewMAX uses CMP here, but shouldn't it be TEST like it is in I_COLMAP?
;
;;;	cmp	mode_colopt, 1
	test	mode_colopt, 1		; New in ViewMAX/2: Separate colour
	jz	s_colmap_ld1		; and mono tables?
	add	di, 60h
s_colmap_ld1:
	xor	cx, cx			; init the temp accum
	mov	dx, INTIN+2		; get the red value
	call	s_colmap_val
	mov	uni_r,al
	mov	dx, INTIN+4		; get the grn value
	call	s_colmap_val
	mov	uni_g,al
	mov	dx, INTIN+6		; get the blu values 
	call	s_colmap_val
	mov	uni_b,al
	mov	ah,10h
	cmp	mode_colopt, 3
	jnz	s_colmap_1
	mov	al,ah
	pop	bx
	mov	bl, col_col_tbl[bx]
	mov	ch,cs:uni_g
	mov	cl,cs:uni_b
	mov	dh,cs:uni_r		; Load VGA palette register
	jmps	s_colmap_2
s_colmap_1:
	mov	bh, ch
	or	bh, cl
	pop	cx
	xor	al, al
s_colmap_2:
	int	10h
s_colmap_exit:
	ret
;
uni_r	db	0
uni_g	db	0
uni_b	db	0

;
; entry 
;	di = offset within act/real tbl of rgb values
;	ch = high order rgb lut bits
;	cl = low order rgb lut bits
;	dx = intensity value in 0 - 1000
; 
s_colmap_val:
	mov	req_col_tbl[di], dx
	cmp	mode_colopt,3
	jnz	s_colmap_ega
	push	di
	mov	ax,1000			; scale from 0 - 1000 (GEM)
	push	ax			; to 0 - 63 (VGA)
	push	dx
	mov	ax,64
	push	ax
	call	SMUL_DIV
	add	sp,6
	push	ax
	mov	bx,64
	push	bx
	push	ax
	mov	bx,64
	push	bx
	call	SMUL_DIV
	add	sp,6
	pop	bx
	pop	di
	mov	act_col_tbl[di], ax
	mov	ax,bx
	cmp	al,63
	jc	range_ok
	mov	al,63
range_ok:
	inc	di
	inc	di
	ret
;
s_colmap_ega:
	shl	cx,1
	cmp	dx,0
	jge	ega_scolmap1
	xor	dx,dx
ega_scolmap1:
	cmp	dx,1000
	jl	ega_scolmap2
	mov	dx,999
ega_scolmap2:
	mov	ax, 166
	xor	bh, bh
ega_scolmap3:
	cmp	dx,ax
	jle	ega_scolmap4
	add	ax,333
	inc	bh
	jmps	ega_scolmap3
;
ega_scolmap4:
	sub	ax, 166
	cmp	ax, 999
	jnz	ega_scolmap5
	inc	ax
ega_scolmap5:
	mov	act_col_tbl[di],ax
	add	di,2
	test	bh,1
	jz	ega_scolmap6
	or	ch,8
ega_scolmap6:
	test	bh,2
	jz	ega_scolmap7
	or	cl,1
ega_scolmap7:
	ret

EJECT
;****************************************************************
;TRAN_FM							*	
;	ENTRY	                                        	*
;		                                     		*
;								*
;	EXIT	                             			*
;		                           			*
;								*
;	Reg. Used. AX, BX, CX, DX, DI				*
;								*
;****************************************************************
TRAN_FM:
	push	bp	
	push	es
	push	ds
	les	di,contrl_ptr
	mov	ax, es: word ptr 14[di]
	mov	bx, es: word ptr 16[di]		; get smfdb pointer
	mov	dx, es: word ptr 18[di]
	mov	bp, es: word ptr 20[di]		; get dmfdb pointer
	mov	es, bx
	mov	di, ax				; set es:di to it
	mov	ax, es: word ptr 12[di]		; get num of planes in source
; xform n to n planes
	push	ax				; save the plane count
	call	calc_src_form
	call	calc_des_form
	call	calc_seg_off
	pop	bx				; get the plane count back
col_to_col_lp:
	push	si
	push	di
	push	bx
	push	cx
col_to_col_loop:
	lodsw
if not byte_swap
	xchg	ah,al
endif
if rev_vid
	not	ax
endif
	stosw
	loop	col_to_col_loop
	pop	cx
	pop	bx
	pop	di
	pop	si
	call	tran_next_seg
	dec	bx
	jnz	col_to_col_lp
	pop	ds
	pop	es
	pop	bp
	ret
tran_next_seg:
	push	cx
	mov	ax, cx
	mov	cl, 3
	shr	ax, cl			;get the segment increment
	mov	bp, es
	add	bp, ax
	mov	es, bp
	mov	bp, ds
	add	bp, ax
	mov	ds, bp
	pop	cx
	mov	ax, cx			;get the byte increment
	and	ax, 0007h
	shl	ax, 1
	add	si, ax
	add	di, ax
	ret
;
calc_seg_off:
	mov	bp, cx				; find the next seg
	shr	bp,1
	shr	bp,1
	shr	bp,1
	mov	dx, cx
	shl	dx, 1
	and	dx, 000fh			; find the incremental offset
;	mov	bx,num_planes
	ret
;
calc_des_form:
	mov	ds, bp
	mov	si, dx				; load dmfdb pointer
	not	bx
	and	bx,1				; invert format
	mov	10[si],bx			; toggle dest form
	mov	ax, es: word ptr 2[di]		; get source ptr seg
	mov	di, es: word ptr [di]		; offset
	mov	es, ax
	mov	ax, 2[si]
	mov	si, [si]			; get dest ptr seg,offset
	mov	ds, ax
	xchg	si,di				; swap pointers
	mov	ax, es
	mov	dx, ds
	mov	es, dx
	mov	ds, ax
	ret
;
calc_src_form:
	mov	bx, es: word ptr 10[di]		; get the format flag
	mov	ax, es: word ptr 8[di]		; get the width in words
	mov	cx, es: word ptr 6[di]		; get the height in pixels
	push	dx
	mul	cx
	pop	dx
	mov	cx, ax				; cx = word count
	and	bx,bx				; if bx = 0 then dev spec form
	ret

EJECT
;****************************************************************
;EX_TIMV							*	
;	ENTRY	                                        	*
;		CONTRL 7,8 = NEW VEC                            *
;	EXIT	                             			*
;		                           			*
;		CONTRL 9,10 = OLD VEC				*
;               INTOUT [0] = TIMER TICK COUNT IN MILLISECS	*
;								*
;****************************************************************
EX_TIMV:
	pushf
	cli
	push	es
	push	ds
	les	di,contrl_ptr
	xor	ax,ax
	mov	ds,ax
	mov	si,4 * 1ch		;setup the offset to timer int vector
	mov	ax,[si]
	mov	es:word ptr 18[di],ax	;save old timer vector
	mov	ax,2[si]
	mov	es:word ptr 20[di],ax
	mov	ax, es:word ptr 14[di]
	mov	[si],ax
	mov	ax, es:word ptr 16[di]
	mov	2[si],ax
	pop	ds
	pop	es
	popf
	mov	ax,1
	mov	CONTRL+8,ax		; flag that data is to be returned 
	mov	ax, 55	
	mov	INTOUT, ax		; return the millisec/tick count 
	ret
EJECT
;****************************************************************
;CONCAT 							*	
;	ENTRY	Reg. BX - X-coordinate (dev. coord.)		*
;		Reg. AX - Y-coordinate (dev. coord.)		*
;								*
;	EXIT	Reg. DI - Physical address			*
;		Reg. BL - Byte index				*	
;								*
;	Reg. Used. AX, BX, CX, DX, DI				*
;								*
;****************************************************************
concat:
	and	bx, 03ffh		;mask off 10 lsb for x-coord.
	mov	cx, bytes_line
	mul	cx
	mov	dl, bl			;save low order byte of x-coord
	and	dl, 07h 		;mask off data bit index.
	mov	cl, 3			;set count to 3
	shr	bx, cl			;shift out 3 lsb of x-coord.
	add	ax, bx			;concatenate y and x coordinates in AX
	mov	di, ax			;di = memory address
	xor	dh, dh
	mov	bx, dx			;bx = bit index into data byte
	ret
EJECT
include	ibmmdvsp.a86
if mouse
cseg
include imouse.a86
endif
cseg
include egammre1.a86
include egammre2.a86
dseg
include unidev.a86
;
dispmode	dw	1
mode_save1	db	0
mode_save2	db	3
mode_colopt	db	0
true_yresmx	dw	479
true_ysize	dw	419
true_planes	dw	4
true_maxcol	dw	16

; Mono version first
		if	GSX
act_col_tbl	dw	   0,    0,    0	;black
		dw	1000, 1000, 1000	;white
		else
act_col_tbl	dw	1000, 1000, 1000	;white
		dw	1000,    0,    0	;red
		endif
		dw	   0, 1000,    0	;green
		dw	1000, 1000,    0	;yellow
		dw	   0,    0, 1000	;blue
		dw	1000,    0, 1000	;magenta
		dw	   0, 1000, 1000	;cyan
		dw	   0,    0,    0	;grey
		dw	 333,  333,  333	;light grey
		dw	 333,    0,    0	;light red
		dw	   0,  333,    0	;light green
		dw	 333,  333,    0	;light yellow
		dw	   0,    0,  333	;light blue
		dw	 333,    0,  333	;light magenta
		dw	   0,  333,  333	;light cyan
		if	GSX
		dw	1000, 1000, 1000	;white
		else
		dw	   0,    0,    0	;black
		endif
; Then colour
		if	GSX
		dw	   0,    0,    0	;black
		else
		dw	1000, 1000, 1000	;white
		endif
		dw	1000,    0,    0	;red
		dw	   0, 1000,    0	;green
		dw	1000, 1000,    0	;yellow
		dw	   0,    0, 1000	;blue
		dw	1000,    0, 1000	;magenta
		dw	   0, 1000, 1000	;cyan
		dw	 666,  666,  666	;grey
		dw	 333,  333,  333	;light grey
		dw	 333,    0,    0	;light red
		dw	   0,  333,    0	;light green
		dw	 333,  333,    0	;light yellow
		dw	   0,    0,  333	;light blue
		dw	 333,    0,  333	;light magenta
		dw	   0,  333,  333	;light cyan
		if	GSX
		dw	1000, 1000, 1000	;white
		else
		dw	   0,    0,    0	;black
		endif
;
; Mono version first
;
		if	GSX
req_col_tbl	dw	   0,    0,    0	;black
		dw	1000, 1000, 1000	;white
		else
req_col_tbl	dw	1000, 1000, 1000	;white
		dw	1000,    0,    0	;red
		endif
		dw	   0, 1000,    0	;green
		dw	1000, 1000,    0	;yellow
		dw	   0,    0, 1000	;blue
		dw	1000,    0, 1000	;magenta
		dw	   0, 1000, 1000	;cyan
		dw	   0,    0,    0	;gray
		dw	 333,  333,  333	;light grey
		dw	 333,    0,    0	;light red
		dw	   0,  333,    0	;light green
		dw	 333,  333,    0	;light yellow
		dw	   0,    0,  333	;light blue
		dw	 333,    0,  333	;light magenta
		dw	   0,  333,  333	;light cyan
		if	GSX
		dw	1000, 1000, 1000	;white
		else
		dw	   0,    0,    0	;black
		endif
; Then colour
		if	GSX
		dw	   0,    0,    0	;black
		else
		dw	1000, 1000, 1000	;white
		endif
		dw	1000,    0,    0	;red
		dw	   0, 1000,    0	;green
		dw	1000, 1000,    0	;yellow
		dw	   0,    0, 1000	;blue
		dw	1000,    0, 1000	;magenta
		dw	   0, 1000, 1000	;cyan
		dw	 666,  666,  666	;gray
		dw	 333,  333,  333	;light grey
		dw	 333,    0,    0	;light red
		dw	   0,  333,    0	;light green
		dw	 333,  333,    0	;light yellow
		dw	   0,    0,  333	;light blue
		dw	 333,    0,  333	;light magenta
		dw	   0,  333,  333	;light cyan
		if	GSX
		dw	1000, 1000, 1000	;white
		else
		dw	   0,    0,    0	;black
		endif
;
		if	GSX
mono_ega_tbl	db	0, 24, 0, 24, 0, 24, 0, 24
		db	0, 24, 0, 24, 0, 24, 0, 24
		db	0
;
mono_vga_tbl	db	0, 63, 0, 63, 0, 63, 0, 63
		db	0, 63, 0, 63, 0, 63, 0, 63
		db	0


		else

mono_ega_tbl	db	24, 0, 24, 0, 24, 0, 24, 0
		db	24, 0, 24, 0, 24, 0, 24, 0
		db	0
;
mono_vga_tbl	db	63, 0, 63, 0, 63, 0, 63, 0
		db	63, 0, 63, 0, 63, 0, 63, 0
		db	0
		endif
;
		if	GSX

col_col_tbl	db	00000000b		;pel val = 0 white
		db	00100100b		;pel val = 1 red
		db	00010010b		;pel val = 2 green
		db	00110110b		;pel val = 3 yellow
		db	00001001b		;pel val = 4 blue
		db	00101101b		;pel val = 5 magenta
		db	00011011b		;pel val = 6 cyan
		db	00000111b		;pel val = 7 black
		db	00111000b		;pel val = 0 grey
		db	00000100b		;pel val = 1 lt red
		db	00000010b		;pel val = 2 lt green
		db	00000110b		;pel val = 3 lt yellow
		db	00000001b		;pel val = 4 lt blue
		db	00000101b		;pel val = 5 lt magenta
		db	00000011b		;pel val = 6 lt cyan
		db	00111111b		;pel val = 7 black
		db	0			;overscan = 0

		else

col_col_tbl	db	00111111b		;pel val = 0 white
		db	00100100b		;pel val = 1 red
		db	00010010b		;pel val = 2 green
		db	00110110b		;pel val = 3 yellow
		db	00001001b		;pel val = 4 blue
		db	00101101b		;pel val = 5 magenta
		db	00011011b		;pel val = 6 cyan
		db	00000111b		;pel val = 7 black
		db	00111000b		;pel val = 0 grey
		db	00000100b		;pel val = 1 lt red
		db	00000010b		;pel val = 2 lt green
		db	00000110b		;pel val = 3 lt yellow
		db	00000001b		;pel val = 4 lt blue
		db	00000101b		;pel val = 5 lt magenta
		db	00000011b		;pel val = 6 lt cyan
		db	00000000b		;pel val = 7 black
		db	0			;overscan = 0

		endif

		if	GSX
uni_col_tbl	db  0, 0, 0		;White
		db 63, 0, 0		;Red
		db  0,63, 0		;Green
		db 63,63, 0		;Yellow
		db  0, 0,63		;Blue
		db 63, 0,63		;Magenta
		db  0,63,63		;Cyan
		db 42,42,42		;Light grey
		db 21,21,21		;Dark grey
		db 42, 0, 0		;Dark red
		db  0,42, 0		;Dark green
		db 42,42, 0		;Dark yellow
		db  0, 0,42		;Dark blue
		db 42, 0,42		;Dark magenta
		db  0,42,42		;Dark cyan
		db 63,63,63		;White
		else

uni_col_tbl	db 63,63,63		;White
		db 63, 0, 0		;Red
		db  0,63, 0		;Green
		db 63,63, 0		;Yellow
		db  0, 0,63		;Blue
		db 63, 0,63		;Magenta
		db  0,63,63		;Cyan
		db 42,42,42		;Light grey
		db 21,21,21		;Dark grey
		db 42, 0, 0		;Dark red
		db  0,42, 0		;Dark green
		db 42,42, 0		;Dark yellow
		db  0, 0,42		;Dark blue
		db 42, 0,42		;Dark magenta
		db  0,42,42		;Dark cyan
		db  0, 0, 0		;Black
		endif


MAP_COL		dw	0		;white
		dw	0fh		;black
		dw	1		;red
		dw	2		;green
		dw	4		;blue
		dw	6		;cyan
		dw	3		;yellow	
		dw	5		;magenta
		dw	7		;white
		dw	8		;black
		dw	9		;lt red
		dw	10		;lt green
		dw	12		;lt blue
		dw	14		;lt cyan
		dw	11		;lt yellow	
		dw	13		;lt magenta

CONTRL		rw	CONTRL_SIZE
INTIN		rw	INTIN_SIZE
PTSOUT		rw	PTSOUT_SIZE
					; ...
		include	date.a86
		db ' IBM EGA/VGA hires mono/colour driver '
		include copyrt.a86
		rs offset PTSIN + 2 * PTSIN_SIZE + 4 - offset $
INTOUT		rw INTOUT_SIZE
					; ...

